// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Rommie.Persistence.Data;

#nullable disable

namespace Rommie.Persistence.Migrations
{
    [DbContext(typeof(MerchantDbContext))]
    [Migration("20250906174634_AddDocumentRequest")]
    partial class AddDocumentRequest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Rommie.Domain.Entities.Outbox.OutboxConsumerMessage", b =>
                {
                    b.Property<Guid>("id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("HandlerName")
                        .HasColumnType("text")
                        .HasColumnName("handler_name");

                    b.HasKey("id", "HandlerName")
                        .HasName("pk_outbox_consumer_messages");

                    b.ToTable("outbox_consumer_messages", (string)null);
                });

            modelBuilder.Entity("Rommie.Domain.Entities.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("Rommie.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("IdentityProviderId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identity_provider_id");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<bool>("TwoFactorEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("two_factor_enabled");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("IdentityProviderId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identity_provider_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Rommie.Domain.Entities.UserVerificationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DocumentType")
                        .HasColumnType("integer")
                        .HasColumnName("document_type");

                    b.PrimitiveCollection<List<string>>("DocumentUrl")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("document_url");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_verification_requests");

                    b.HasIndex("UserID")
                        .HasDatabaseName("ix_user_verification_requests_user_id");

                    b.ToTable("user_verification_requests", (string)null);
                });

            modelBuilder.Entity("Rommie.Domain.Entities.UserVerificationRequest", b =>
                {
                    b.HasOne("Rommie.Domain.Entities.User", "User")
                        .WithMany("VerificationRequests")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_verification_requests_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Rommie.Domain.Entities.User", b =>
                {
                    b.Navigation("VerificationRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
